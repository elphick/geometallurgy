
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/examples/02_interval_sample/02_interval_data_sink_float.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_examples_02_interval_sample_02_interval_data_sink_float.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_examples_02_interval_sample_02_interval_data_sink_float.py:


Interval Data - Sink Float
==========================

Intervals are encountered in Metallurgy, aka fractions,
e.g. size fractions.  In that case the typical nomenclature is size_retained, size passing, since the data
originates from a sieve stack.

The Sink Float metallurgical test splits/fractionates samples by density.  The density fraction is often conducted by
size fraction, resulting in 2D fractionation (interval) data.

.. GENERATED FROM PYTHON SOURCE LINES 13-25

.. code-block:: Python


    import logging

    # noinspection PyUnresolvedReferences
    import numpy as np
    import pandas as pd
    import plotly.io

    from elphick.geomet import IntervalSample
    from elphick.geomet.datasets import datasets
    from elphick.geomet.utils.pandas import MeanIntervalIndex








.. GENERATED FROM PYTHON SOURCE LINES 26-30

.. code-block:: Python

    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s %(levelname)s %(module)s - %(funcName)s: %(message)s',
                        datefmt='%Y-%m-%dT%H:%M:%S%z')








.. GENERATED FROM PYTHON SOURCE LINES 31-35

Load Data
---------

We load some real data.

.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: Python


    df_data: pd.DataFrame = datasets.load_nordic_iron_ore_sink_float()
    df_data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>size_retained</th>
          <th>size_passing</th>
          <th>density_lo</th>
          <th>density_hi</th>
          <th>mass_pct</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>P</th>
          <th>TiO2</th>
          <th>V</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1.000</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.4</td>
          <td>22.7</td>
          <td>50.9</td>
          <td>0.042</td>
          <td>0.170</td>
          <td>0.0049</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.100</td>
          <td>1.000</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>67.1</td>
          <td>27.3</td>
          <td>47.7</td>
          <td>0.107</td>
          <td>0.178</td>
          <td>0.0062</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>12.7</td>
          <td>18.0</td>
          <td>57.8</td>
          <td>0.440</td>
          <td>0.200</td>
          <td>0.0056</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>8.2</td>
          <td>16.9</td>
          <td>57.1</td>
          <td>0.610</td>
          <td>0.235</td>
          <td>0.0057</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.000</td>
          <td>0.040</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>11.6</td>
          <td>19.4</td>
          <td>51.6</td>
          <td>0.650</td>
          <td>0.310</td>
          <td>0.0072</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0.100</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>54.2</td>
          <td>1.2</td>
          <td>1.6</td>
          <td>0.180</td>
          <td>0.084</td>
          <td>0.0030</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.100</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>9.7</td>
          <td>16.6</td>
          <td>42.6</td>
          <td>0.980</td>
          <td>0.380</td>
          <td>0.0100</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0.100</td>
          <td>NaN</td>
          <td>3.3</td>
          <td>NaN</td>
          <td>36.1</td>
          <td>68.0</td>
          <td>78.8</td>
          <td>0.033</td>
          <td>0.285</td>
          <td>0.0120</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>24.0</td>
          <td>1.2</td>
          <td>79.5</td>
          <td>0.015</td>
          <td>0.060</td>
          <td>0.0070</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>11.9</td>
          <td>10.2</td>
          <td>54.0</td>
          <td>2.320</td>
          <td>0.280</td>
          <td>0.0080</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>3.3</td>
          <td>NaN</td>
          <td>64.1</td>
          <td>67.1</td>
          <td>1.4</td>
          <td>0.174</td>
          <td>0.530</td>
          <td>0.0020</td>
        </tr>
        <tr>
          <th>11</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>76.6</td>
          <td>3.1</td>
          <td>71.3</td>
          <td>0.850</td>
          <td>0.145</td>
          <td>0.0130</td>
        </tr>
        <tr>
          <th>12</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>4.3</td>
          <td>28.5</td>
          <td>24.5</td>
          <td>2.780</td>
          <td>0.460</td>
          <td>0.1100</td>
        </tr>
        <tr>
          <th>13</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>3.3</td>
          <td>NaN</td>
          <td>19.1</td>
          <td>68.6</td>
          <td>0.6</td>
          <td>0.069</td>
          <td>0.480</td>
          <td>0.0130</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 41-43

The dataset contains size x assay, plus size x density x assay data.  We'll drop the size x assay data to leave the
sink / float data.

.. GENERATED FROM PYTHON SOURCE LINES 43-47

.. code-block:: Python


    df_sink_float: pd.DataFrame = df_data.dropna(subset=['density_lo', 'density_hi'], how='all').copy()
    df_sink_float






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>size_retained</th>
          <th>size_passing</th>
          <th>density_lo</th>
          <th>density_hi</th>
          <th>mass_pct</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>P</th>
          <th>TiO2</th>
          <th>V</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>5</th>
          <td>0.100</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>54.2</td>
          <td>1.2</td>
          <td>1.6</td>
          <td>0.180</td>
          <td>0.084</td>
          <td>0.003</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.100</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>9.7</td>
          <td>16.6</td>
          <td>42.6</td>
          <td>0.980</td>
          <td>0.380</td>
          <td>0.010</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0.100</td>
          <td>NaN</td>
          <td>3.3</td>
          <td>NaN</td>
          <td>36.1</td>
          <td>68.0</td>
          <td>78.8</td>
          <td>0.033</td>
          <td>0.285</td>
          <td>0.012</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>24.0</td>
          <td>1.2</td>
          <td>79.5</td>
          <td>0.015</td>
          <td>0.060</td>
          <td>0.007</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>11.9</td>
          <td>10.2</td>
          <td>54.0</td>
          <td>2.320</td>
          <td>0.280</td>
          <td>0.008</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>3.3</td>
          <td>NaN</td>
          <td>64.1</td>
          <td>67.1</td>
          <td>1.4</td>
          <td>0.174</td>
          <td>0.530</td>
          <td>0.002</td>
        </tr>
        <tr>
          <th>11</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>76.6</td>
          <td>3.1</td>
          <td>71.3</td>
          <td>0.850</td>
          <td>0.145</td>
          <td>0.013</td>
        </tr>
        <tr>
          <th>12</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>4.3</td>
          <td>28.5</td>
          <td>24.5</td>
          <td>2.780</td>
          <td>0.460</td>
          <td>0.110</td>
        </tr>
        <tr>
          <th>13</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>3.3</td>
          <td>NaN</td>
          <td>19.1</td>
          <td>68.6</td>
          <td>0.6</td>
          <td>0.069</td>
          <td>0.480</td>
          <td>0.013</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 48-49

We will fill some nan values with assumptions

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python

    df_sink_float['size_passing'].fillna(1.0, inplace=True)
    df_sink_float['density_lo'].fillna(1.5, inplace=True)
    df_sink_float['density_hi'].fillna(5.0, inplace=True)








.. GENERATED FROM PYTHON SOURCE LINES 54-55

Check the mass_pct by size

.. GENERATED FROM PYTHON SOURCE LINES 55-63

.. code-block:: Python


    mass_check: pd.DataFrame = df_sink_float[['size_passing', 'size_retained', 'mass_pct']].groupby(
        ['size_passing', 'size_retained']).sum()
    # check that all are 100
    assert np.all(mass_check['mass_pct'] == 100)

    mass_check






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>mass_pct</th>
        </tr>
        <tr>
          <th>size_passing</th>
          <th>size_retained</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.063</th>
          <th>0.040</th>
          <td>100.0</td>
        </tr>
        <tr>
          <th>0.100</th>
          <th>0.063</th>
          <td>100.0</td>
        </tr>
        <tr>
          <th>1.000</th>
          <th>0.100</th>
          <td>100.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 64-66

This indicates that the mass_pct column is actually a density_mass_pct column.
We'll rename that but also need to get the size_mass_pct values for those sizes from the size dataset

.. GENERATED FROM PYTHON SOURCE LINES 66-85

.. code-block:: Python


    df_sink_float.rename(columns={'mass_pct': 'density_mass_pct'}, inplace=True)

    df_size: pd.DataFrame = df_data.loc[np.all(df_data[['density_lo', 'density_hi']].isna(), axis=1), :].copy()
    df_size.dropna(how='all', axis=1, inplace=True)
    assert df_size['mass_pct'].sum() == 100

    size_pairs = set(list((round(r, 5), round(p, 5)) for r, p in
                          zip(df_sink_float['size_retained'].values, df_sink_float['size_passing'].values)))
    for r, p in size_pairs:
        df_sink_float.loc[(df_sink_float['size_retained'] == r) & (df_sink_float['size_passing'] == p), 'size_mass_pct'] = \
            df_size.loc[(df_size['size_retained'] == r) & (df_size['size_passing'] == p), 'mass_pct'].values[0]
    # relocate the size_mass_pct column to the correct position, after size_passing
    df_sink_float.insert(2, df_sink_float.columns[-1], df_sink_float.pop(df_sink_float.columns[-1]))
    # add the mass_pct column
    df_sink_float.insert(loc=6, column='mass_pct',
                         value=df_sink_float['density_mass_pct'] * df_sink_float['size_mass_pct'] / 100)
    df_sink_float






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>size_retained</th>
          <th>size_passing</th>
          <th>size_mass_pct</th>
          <th>density_lo</th>
          <th>density_hi</th>
          <th>density_mass_pct</th>
          <th>mass_pct</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>P</th>
          <th>TiO2</th>
          <th>V</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>5</th>
          <td>0.100</td>
          <td>1.000</td>
          <td>67.1</td>
          <td>1.5</td>
          <td>2.7</td>
          <td>54.2</td>
          <td>36.3682</td>
          <td>1.2</td>
          <td>1.6</td>
          <td>0.180</td>
          <td>0.084</td>
          <td>0.003</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.100</td>
          <td>1.000</td>
          <td>67.1</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>9.7</td>
          <td>6.5087</td>
          <td>16.6</td>
          <td>42.6</td>
          <td>0.980</td>
          <td>0.380</td>
          <td>0.010</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0.100</td>
          <td>1.000</td>
          <td>67.1</td>
          <td>3.3</td>
          <td>5.0</td>
          <td>36.1</td>
          <td>24.2231</td>
          <td>68.0</td>
          <td>78.8</td>
          <td>0.033</td>
          <td>0.285</td>
          <td>0.012</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>12.7</td>
          <td>1.5</td>
          <td>2.7</td>
          <td>24.0</td>
          <td>3.0480</td>
          <td>1.2</td>
          <td>79.5</td>
          <td>0.015</td>
          <td>0.060</td>
          <td>0.007</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>12.7</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>11.9</td>
          <td>1.5113</td>
          <td>10.2</td>
          <td>54.0</td>
          <td>2.320</td>
          <td>0.280</td>
          <td>0.008</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>12.7</td>
          <td>3.3</td>
          <td>5.0</td>
          <td>64.1</td>
          <td>8.1407</td>
          <td>67.1</td>
          <td>1.4</td>
          <td>0.174</td>
          <td>0.530</td>
          <td>0.002</td>
        </tr>
        <tr>
          <th>11</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>8.2</td>
          <td>1.5</td>
          <td>2.7</td>
          <td>76.6</td>
          <td>6.2812</td>
          <td>3.1</td>
          <td>71.3</td>
          <td>0.850</td>
          <td>0.145</td>
          <td>0.013</td>
        </tr>
        <tr>
          <th>12</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>8.2</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>4.3</td>
          <td>0.3526</td>
          <td>28.5</td>
          <td>24.5</td>
          <td>2.780</td>
          <td>0.460</td>
          <td>0.110</td>
        </tr>
        <tr>
          <th>13</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>8.2</td>
          <td>3.3</td>
          <td>5.0</td>
          <td>19.1</td>
          <td>1.5662</td>
          <td>68.6</td>
          <td>0.6</td>
          <td>0.069</td>
          <td>0.480</td>
          <td>0.013</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 86-88

Create MeanIntervalIndexes
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 88-103

.. code-block:: Python


    size_intervals = pd.arrays.IntervalArray.from_arrays(df_sink_float['size_retained'], df_sink_float['size_passing'],
                                                         closed='left')
    size_index = MeanIntervalIndex(size_intervals)
    size_index.name = 'size'

    density_intervals = pd.arrays.IntervalArray.from_arrays(df_sink_float['density_lo'], df_sink_float['density_hi'],
                                                            closed='left')
    density_index = MeanIntervalIndex(density_intervals)
    density_index.name = 'density'

    df_sink_float.index = pd.MultiIndex.from_arrays([size_index, density_index])
    df_sink_float.drop(columns=['size_retained', 'size_passing', 'density_lo', 'density_hi'], inplace=True)
    df_sink_float






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>size_mass_pct</th>
          <th>density_mass_pct</th>
          <th>mass_pct</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>P</th>
          <th>TiO2</th>
          <th>V</th>
        </tr>
        <tr>
          <th>size</th>
          <th>density</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="3" valign="top">[0.1, 1.0)</th>
          <th>[1.5, 2.7)</th>
          <td>67.1</td>
          <td>54.2</td>
          <td>36.3682</td>
          <td>1.2</td>
          <td>1.6</td>
          <td>0.180</td>
          <td>0.084</td>
          <td>0.003</td>
        </tr>
        <tr>
          <th>[2.7, 3.3)</th>
          <td>67.1</td>
          <td>9.7</td>
          <td>6.5087</td>
          <td>16.6</td>
          <td>42.6</td>
          <td>0.980</td>
          <td>0.380</td>
          <td>0.010</td>
        </tr>
        <tr>
          <th>[3.3, 5.0)</th>
          <td>67.1</td>
          <td>36.1</td>
          <td>24.2231</td>
          <td>68.0</td>
          <td>78.8</td>
          <td>0.033</td>
          <td>0.285</td>
          <td>0.012</td>
        </tr>
        <tr>
          <th rowspan="3" valign="top">[0.063, 0.1)</th>
          <th>[1.5, 2.7)</th>
          <td>12.7</td>
          <td>24.0</td>
          <td>3.0480</td>
          <td>1.2</td>
          <td>79.5</td>
          <td>0.015</td>
          <td>0.060</td>
          <td>0.007</td>
        </tr>
        <tr>
          <th>[2.7, 3.3)</th>
          <td>12.7</td>
          <td>11.9</td>
          <td>1.5113</td>
          <td>10.2</td>
          <td>54.0</td>
          <td>2.320</td>
          <td>0.280</td>
          <td>0.008</td>
        </tr>
        <tr>
          <th>[3.3, 5.0)</th>
          <td>12.7</td>
          <td>64.1</td>
          <td>8.1407</td>
          <td>67.1</td>
          <td>1.4</td>
          <td>0.174</td>
          <td>0.530</td>
          <td>0.002</td>
        </tr>
        <tr>
          <th rowspan="3" valign="top">[0.04, 0.063)</th>
          <th>[1.5, 2.7)</th>
          <td>8.2</td>
          <td>76.6</td>
          <td>6.2812</td>
          <td>3.1</td>
          <td>71.3</td>
          <td>0.850</td>
          <td>0.145</td>
          <td>0.013</td>
        </tr>
        <tr>
          <th>[2.7, 3.3)</th>
          <td>8.2</td>
          <td>4.3</td>
          <td>0.3526</td>
          <td>28.5</td>
          <td>24.5</td>
          <td>2.780</td>
          <td>0.460</td>
          <td>0.110</td>
        </tr>
        <tr>
          <th>[3.3, 5.0)</th>
          <td>8.2</td>
          <td>19.1</td>
          <td>1.5662</td>
          <td>68.6</td>
          <td>0.6</td>
          <td>0.069</td>
          <td>0.480</td>
          <td>0.013</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 104-106

Create an IntervalSample
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 106-113

.. code-block:: Python


    interval_sample = IntervalSample(df_sink_float, name='SINK_FLOAT', moisture_in_scope=False, mass_dry_var='mass_pct')
    print(interval_sample.is_2d_grid())
    print(interval_sample.is_rectilinear_grid)

    fig = interval_sample.plot_heatmap(components=['mass_pct'])
    plotly.io.show(fig)



.. raw:: html
    :file: images/sphx_glr_02_interval_data_sink_float_001.html


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    False
    False





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.558 seconds)


.. _sphx_glr_download_auto_examples_examples_02_interval_sample_02_interval_data_sink_float.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02_interval_data_sink_float.ipynb <02_interval_data_sink_float.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02_interval_data_sink_float.py <02_interval_data_sink_float.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
