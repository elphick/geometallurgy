
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/examples/02_interval_sample/04_partition_models.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_examples_02_interval_sample_04_partition_models.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_examples_02_interval_sample_04_partition_models.py:


Partition Models
================

Partition models, (a.k.a. partition curves in the 1 dimensional case) define the separation of a unit operation /
process.

The Partition Number (K) is represents the probability that a particle will report to the concentrate stream.

.. math::
    K = \frac{{m_{concentrate}}}{{m_{feed}}}

Note that the term “concentrate” in the numerator can be misleading, as it does not always accurately represent
the desired or obtained fraction. For instance, in a screening operation, the numerator might be the “oversize”
rather than the “concentrate.” To create a more universally applicable term for the numerator, we can redefine
it as the “preferred fraction.” This new terminology allows for a more inclusive and adaptable equation:

.. math::
    K = \frac{{m_{preferred}}}{{m_{feed}}}

Consider a desliming cyclone that aims to separate a slurry at 150 micron.  The preferred stream is defined as
the Underflow (UF), since that is the "stream of interest" in our simple example.

..  Admonition:: TODO

    Add a reference to partition curves.

.. GENERATED FROM PYTHON SOURCE LINES 29-45

.. code-block:: Python

    from functools import partial

    import numpy as np
    import pandas as pd
    import plotly
    import plotly.graph_objects as go
    from scipy.interpolate import PchipInterpolator

    from elphick.geomet import IntervalSample
    from elphick.geomet.datasets.sample_data import size_by_assay
    from elphick.geomet.flowsheet import Flowsheet
    from elphick.geomet.utils.partition import napier_munn, napier_munn_size
    from elphick.geomet.utils.pandas import calculate_partition

    # sphinx_gallery_thumbnail_number = -1








.. GENERATED FROM PYTHON SOURCE LINES 46-50

Create a mass-composition object
--------------------------------

We get some demo data in the form of a pandas DataFrame

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: Python


    df_data: pd.DataFrame = size_by_assay()
    mc_feed: IntervalSample = IntervalSample(df_data, name='size sample', moisture_in_scope=False)
    print(mc_feed)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    IntervalSample: size sample
    {'mass_dry': {0: 100.0}, 'Fe': {0: 60.09245000000001}, 'SiO2': {0: 4.14753}, 'Al2O3': {0: 4.277159999999999}}




.. GENERATED FROM PYTHON SOURCE LINES 57-63

Define and Apply the Partition
------------------------------

We partially initialise the partition function.  The unfilled argument must be named the same as the index in the
IntervalSample object upon which the partition is applied.  In this example the unfilled argument is 'size',
so the partition will be applied to the size dimension of the index.

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: Python


    part_cyclone = partial(napier_munn_size, d50=0.150, ep=0.1)








.. GENERATED FROM PYTHON SOURCE LINES 67-68

Separate the object using the defined partitions.  UF = Underflow, OF = Overflow

.. GENERATED FROM PYTHON SOURCE LINES 68-76

.. code-block:: Python


    mc_uf, mc_of = mc_feed.split_by_partition(partition_definition=part_cyclone, name_1='underflow', name_2='overflow')
    fs: Flowsheet = Flowsheet().from_objects([mc_feed, mc_uf, mc_of])

    fig = fs.table_plot(table_pos='left',
                        sankey_color_var='Fe', sankey_edge_colormap='copper_r', sankey_vmin=50, sankey_vmax=70)
    fig






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>                        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.35.2.min.js"></script>                <div id="fdbb7903-615f-491b-ae4a-ad0e3b0a0728" class="plotly-graph-div" style="height:100%; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("fdbb7903-615f-491b-ae4a-ad0e3b0a0728")) {                    Plotly.newPlot(                        "fdbb7903-615f-491b-ae4a-ad0e3b0a0728",                        [{"cells":{"align":"left","fill":{"color":[["whitesmoke","lightgray","whitesmoke","whitesmoke","lightgray","whitesmoke","whitesmoke","lightgray","whitesmoke","whitesmoke","lightgray","whitesmoke","whitesmoke","lightgray","whitesmoke"]]},"format":["%s",".0f",".2f",".2f",".2f"],"values":[["size sample","underflow","overflow"],[100.0,47.100386539247616,52.89961346075239],[60.09245000000001,62.594622973323865,57.86458279036432],[4.14753,2.854956208843679,5.2984027798007896],[4.277159999999999,3.0994840761639226,5.325730823145969]]},"columnwidth":[2,1,1,1,1],"header":{"align":"center","fill":{"color":"cornflowerblue"},"font":{"color":"black","size":12},"values":["name","mass_dry","Fe","SiO2","Al2O3"]},"type":"table","domain":{"x":[0.0,0.36000000000000004],"y":[0.0,1.0]}},{"link":{"color":["rgba(155, 98, 62, 255)","rgba(116, 73, 46, 255)","rgba(191, 121, 77, 255)"],"customdata":["\u003cbr \u002f\u003emass_dry: 100\u003cbr \u002f\u003eFe: 60.09\u003cbr \u002f\u003eSiO2: 4.15\u003cbr \u002f\u003eAl2O3: 4.28\u003cbr \u002f\u003e","\u003cbr \u002f\u003emass_dry: 47\u003cbr \u002f\u003eFe: 62.59\u003cbr \u002f\u003eSiO2: 2.85\u003cbr \u002f\u003eAl2O3: 3.10\u003cbr \u002f\u003e","\u003cbr \u002f\u003emass_dry: 53\u003cbr \u002f\u003eFe: 57.86\u003cbr \u002f\u003eSiO2: 5.30\u003cbr \u002f\u003eAl2O3: 5.33\u003cbr \u002f\u003e"],"hovertemplate":"\u003cb\u003e\u003ci\u003e%{label}\u003c\u002fi\u003e\u003c\u002fb\u003e\u003cbr \u002f\u003eSource: %{source.customdata}\u003cbr \u002f\u003eTarget: %{target.customdata}\u003cbr \u002f\u003e%{customdata}","label":["size sample","underflow","overflow"],"source":[0,1,1],"target":[1,2,3],"value":[100.0,47.100386539247616,52.89961346075239]},"node":{"color":["blue","green","blue","blue"],"customdata":["0","1","2","3"],"label":["0","1","2","3"],"line":{"color":"black","width":0.5},"pad":15,"thickness":20},"type":"sankey","domain":{"x":[0.4600000000000001,1.0],"y":[0.0,1.0]}}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"title":{"text":"Flowsheet\u003cbr\u003e\u003csup\u003eNodes Healthy: \u003cspan style='color: black'\u003eTrue\u003c\u002fspan\u003e, Streams Healthy: \u003cspan style='color: black'\u003eTrue\u003c\u002fspan\u003e\u003c\u002fsup\u003e"},"font":{"size":12}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 77-78

We'll now get the partition data from the objects

.. GENERATED FROM PYTHON SOURCE LINES 78-82

.. code-block:: Python


    df_partition: pd.DataFrame = mc_feed.calculate_partition(preferred=mc_uf)
    df_partition






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>size</th>
          <th>K</th>
        </tr>
        <tr>
          <th>size</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>[0.85, 2.0)</th>
          <td>1.303840</td>
          <td>0.999997</td>
        </tr>
        <tr>
          <th>[0.5, 0.85)</th>
          <td>0.651920</td>
          <td>0.995995</td>
        </tr>
        <tr>
          <th>[0.15, 0.5)</th>
          <td>0.273861</td>
          <td>0.795960</td>
        </tr>
        <tr>
          <th>[0.075, 0.15)</th>
          <td>0.106066</td>
          <td>0.381583</td>
        </tr>
        <tr>
          <th>[0.045, 0.075)</th>
          <td>0.058095</td>
          <td>0.266972</td>
        </tr>
        <tr>
          <th>[0.0, 0.045)</th>
          <td>0.020855</td>
          <td>0.194771</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 83-84

Create an interpolator from the data.  As a Callable, the spline can be used to split a MassComposition object.

.. GENERATED FROM PYTHON SOURCE LINES 84-89

.. code-block:: Python


    size_grid = np.linspace(0.01, df_partition.index.right.max(), num=500)
    spline_partition = PchipInterpolator(x=df_partition.sort_index()['size'], y=df_partition.sort_index()['K'])
    pn_extracted = spline_partition(size_grid)








.. GENERATED FROM PYTHON SOURCE LINES 90-91

Plot the extracted data, and the spline on the input partition curve to visually validate.

.. GENERATED FROM PYTHON SOURCE LINES 91-106

.. code-block:: Python


    pn_original = part_cyclone(size_grid)

    fig = go.Figure(go.Scatter(x=size_grid, y=pn_original, name='Input Partition', line=dict(width=5, color='DarkSlateGrey')))
    fig.add_trace(go.Scatter(x=df_partition['size'], y=df_partition['K'], name='Extracted Partition Data', mode='markers',
                             marker=dict(size=12, color='red', line=dict(width=2, color='DarkSlateGrey'))))
    fig.add_trace(
        go.Scatter(x=size_grid, y=pn_extracted, name='Extracted Partition Curve', line=dict(width=2, color='red', dash='dash')))

    fig.update_xaxes(type="log")
    fig.update_layout(title='Partition Round Trip Check', xaxis_title='da', yaxis_title='K', yaxis_range=[0, 1.05])

    # noinspection PyTypeChecker
    plotly.io.show(fig)




.. raw:: html
    :file: images/sphx_glr_04_partition_models_001.html





.. GENERATED FROM PYTHON SOURCE LINES 107-109

There are minor differences between the interpolated spline curve and the Napier-Munn input partition.
However, the data points all lie on both curves.

.. GENERATED FROM PYTHON SOURCE LINES 111-115

Pandas Function
---------------

The partition functionality is available as a pandas function also.

.. GENERATED FROM PYTHON SOURCE LINES 115-119

.. code-block:: Python


    df_partition_2: pd.DataFrame = mc_feed.data.pipe(calculate_partition, df_preferred=mc_uf.data, col_mass_dry='mass_dry')
    df_partition_2






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>size</th>
          <th>K</th>
        </tr>
        <tr>
          <th>size</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>[0.85, 2.0)</th>
          <td>1.303840</td>
          <td>0.999997</td>
        </tr>
        <tr>
          <th>[0.5, 0.85)</th>
          <td>0.651920</td>
          <td>0.995995</td>
        </tr>
        <tr>
          <th>[0.15, 0.5)</th>
          <td>0.273861</td>
          <td>0.795960</td>
        </tr>
        <tr>
          <th>[0.075, 0.15)</th>
          <td>0.106066</td>
          <td>0.381583</td>
        </tr>
        <tr>
          <th>[0.045, 0.075)</th>
          <td>0.058095</td>
          <td>0.266972</td>
        </tr>
        <tr>
          <th>[0.0, 0.045)</th>
          <td>0.020855</td>
          <td>0.194771</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 120-121

.. code-block:: Python

    pd.testing.assert_frame_equal(df_partition, df_partition_2)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.586 seconds)


.. _sphx_glr_download_auto_examples_examples_02_interval_sample_04_partition_models.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 04_partition_models.ipynb <04_partition_models.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 04_partition_models.py <04_partition_models.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
