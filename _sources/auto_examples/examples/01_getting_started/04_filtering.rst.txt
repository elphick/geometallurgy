
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/examples/01_getting_started/04_filtering.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_examples_01_getting_started_04_filtering.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_examples_01_getting_started_04_filtering.py:


Filtering
=========

Filtering is often required to reduce the data of a MassComposition object to a specific subset of interest.

Both individual objects can be filtered, as can multiple objects contained within a Flowsheet object.

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: Python


    import pandas as pd

    from elphick.geomet import Sample
    from elphick.geomet.flowsheet import Flowsheet
    from elphick.geomet.datasets.sample_data import sample_data








.. GENERATED FROM PYTHON SOURCE LINES 18-22

Create a Sample object
----------------------

We get some demo data in the form of a pandas DataFrame

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: Python


    df_data: pd.DataFrame = sample_data()
    df_data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>wet_mass</th>
          <th>mass_dry</th>
          <th>FE</th>
          <th>SIO2</th>
          <th>al2o3</th>
          <th>LOI</th>
          <th>group</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>100.0</td>
          <td>90.0</td>
          <td>57.0</td>
          <td>5.2</td>
          <td>3.0</td>
          <td>5.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>1</th>
          <td>90.0</td>
          <td>80.0</td>
          <td>59.0</td>
          <td>3.1</td>
          <td>1.7</td>
          <td>4.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>110.0</td>
          <td>90.0</td>
          <td>61.0</td>
          <td>2.2</td>
          <td>0.9</td>
          <td>3.0</td>
          <td>grp_2</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 28-29

Construct the object

.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: Python


    obj_mc: Sample = Sample(df_data, name='demo')
    obj_mc.data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>wet_mass</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
          <th>group</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>100.0</td>
          <td>90.0</td>
          <td>10.000000</td>
          <td>57.0</td>
          <td>5.2</td>
          <td>3.0</td>
          <td>5.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>1</th>
          <td>90.0</td>
          <td>80.0</td>
          <td>11.111111</td>
          <td>59.0</td>
          <td>3.1</td>
          <td>1.7</td>
          <td>4.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>110.0</td>
          <td>90.0</td>
          <td>18.181818</td>
          <td>61.0</td>
          <td>2.2</td>
          <td>0.9</td>
          <td>3.0</td>
          <td>grp_2</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 35-40

Filtering Single Objects
------------------------

One of the most common subsets is one that contains records above a particular grade.
The method used to filter is called query, for consistency with the pandas method that execute the same.

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: Python


    obj_1: Sample = obj_mc.query('Fe>58')
    obj_1.data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>wet_mass</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
          <th>group</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>90.0</td>
          <td>80.0</td>
          <td>11.111111</td>
          <td>59.0</td>
          <td>3.1</td>
          <td>1.7</td>
          <td>4.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>110.0</td>
          <td>90.0</td>
          <td>18.181818</td>
          <td>61.0</td>
          <td>2.2</td>
          <td>0.9</td>
          <td>3.0</td>
          <td>grp_2</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 46-47

Notice that the record with an Fe value below 58 has been removed.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

Filtering Multiple Objects
--------------------------

Multiple objects can be loaded into a Flowsheet.  We'll make a small network to demonstrate.

.. GENERATED FROM PYTHON SOURCE LINES 54-59

.. code-block:: Python


    obj_one, obj_two = obj_mc.split(fraction=0.6, name_1='one', name_2='two')

    fs: Flowsheet = Flowsheet.from_objects([obj_mc, obj_one, obj_two], name='Network')








.. GENERATED FROM PYTHON SOURCE LINES 60-62

The weighted mean mass-composition of each object/edge/stream in the network can be reported out with the
report method.

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: Python


    fs.report()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>wet_mass</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>demo</th>
          <td>300.0</td>
          <td>260.0</td>
          <td>13.333333</td>
          <td>59.0</td>
          <td>3.515385</td>
          <td>1.873077</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>one</th>
          <td>180.0</td>
          <td>156.0</td>
          <td>13.333333</td>
          <td>59.0</td>
          <td>3.515385</td>
          <td>1.873077</td>
          <td>4.0</td>
        </tr>
        <tr>
          <th>two</th>
          <td>120.0</td>
          <td>104.0</td>
          <td>13.333333</td>
          <td>59.0</td>
          <td>3.515385</td>
          <td>1.873077</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 66-67

Now we'll filter as we did before, though we must specify which object the query criteria is to be applied to.

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: Python


    fs.query(expr='Fe>58', stream_name='demo').report()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>wet_mass</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>demo</th>
          <td>200.0</td>
          <td>170.0</td>
          <td>15.0</td>
          <td>60.058824</td>
          <td>2.623529</td>
          <td>1.276471</td>
          <td>3.470588</td>
        </tr>
        <tr>
          <th>one</th>
          <td>120.0</td>
          <td>102.0</td>
          <td>15.0</td>
          <td>60.058824</td>
          <td>2.623529</td>
          <td>1.276471</td>
          <td>3.470588</td>
        </tr>
        <tr>
          <th>two</th>
          <td>80.0</td>
          <td>68.0</td>
          <td>15.0</td>
          <td>60.058824</td>
          <td>2.623529</td>
          <td>1.276471</td>
          <td>3.470588</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.666 seconds)


.. _sphx_glr_download_auto_examples_examples_01_getting_started_04_filtering.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 04_filtering.ipynb <04_filtering.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 04_filtering.py <04_filtering.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
